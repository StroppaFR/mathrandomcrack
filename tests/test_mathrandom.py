import unittest

from mathrandomcrack.mathrandom import *

class TestMathRandom(unittest.TestCase):

    def test_v8_conversion(self):
        integer = 12092933408070727569
        expected = (integer >> 12) << 12
        for _ in range(10):
            double = v8_to_double(integer)
            integer = v8_from_double(double)
        self.assertEqual(integer, expected)

    def test_math_random_generation(self):
        math_random = MathRandom(6770692079143846949, 12009346246601641483)

        expected_doubles = [0.9742385602746879, 0.14815118865210408, 0.5436735561321508, 0.776554156122268, 0.4070774492946394, 0.7285329198840587, 0.13973926820201354, 0.5736421400773355, 0.41667400100545327, 0.8912806642976514, 0.11204285276345027, 0.18404040839430236, 0.4782971487186798, 0.3796521669067088, 0.989201295417008, 0.9697552194357351, 0.6966167349179451, 0.2634146257689207, 0.3489983866126112, 0.4393039244730843, 0.15723657672322866, 0.5732697001502722, 0.3363608031550396, 0.7090700200634417, 0.5286959878991273, 0.5078287948200142, 0.022943616157470537, 0.6551553161820236, 0.628489614702654, 0.49998694315552816, 0.8649034511502789, 0.2629120209514204, 0.9002783858969123, 0.1397501858599426, 0.9039929075269797, 0.4576989046783826, 0.09479564894555659, 0.0595068197374502, 0.32746163228123404, 0.525262815224562, 0.9983071285287053, 0.7167870768352507, 0.8539612975205606, 0.7832119042919543, 0.08080137087888306, 0.5429897714329568, 0.718296188999453, 0.38453178041447766, 0.002689699239919907, 0.13849809845172656, 0.28721134842344087, 0.9750709028089097, 0.6836490775957171, 0.15267651599511534, 0.2787737619575896, 0.36268678147691835, 0.7738687831896665, 0.5913748804621017, 0.9831558069129926, 0.27771784914684816, 0.24657982760817454, 0.44016862318954453, 0.6962575901069894, 0.6510279645348067, 0.1883688003330004, 0.0748307177793821, 0.41951480901781246, 0.9893147372910016, 0.9724940577652632, 0.2799979756147599, 0.045785749739355674, 0.25908804604627256, 0.7005048965791643, 0.8650250641910666, 0.15841797304189242, 0.0693845619662874, 0.22354602835451853, 0.7495070207639469, 0.3942969898144475, 0.21970616423971467, 0.11505475720713965, 0.6983446588496263, 0.8421662413364761, 0.023837970228779426, 0.12094459657302115, 0.3560306149463035, 0.15326170759886626, 0.4111046889573544, 0.03172794269168455, 0.26407934852612724, 0.43596030963609644, 0.9878040332714852, 0.1598127761728072, 0.23412524904062337, 0.24474634864855793, 0.43116407616041363, 0.5003629703143653, 0.6161629500777546, 0.11286711753883827, 0.23012062706659164, 0.1204978492261406, 0.15029406653845778, 0.9016579233326607, 0.1398769483861888, 0.3934670247396619, 0.7898019017974194, 0.4022731522295311, 0.636409289263191, 0.19863712358599805, 0.642905498227986, 0.006428908515869303, 0.7102661211473984, 0.41978405370899896, 0.9091906800788416, 0.42844843030756796, 0.5532118123691918, 0.01110623911911679, 0.5393619562300278, 0.5910370496750068, 0.19992532509028305, 0.13646179743046583, 0.7320738633431951, 0.7444229307963395, 0.8067643397728854, 0.6872848122935007, 0.6398155403789845, 0.48270362227304187, 0.8887545149146032, 0.4141369758905702, 0.9334605370967346, 0.6860794030671995, 0.1383376579026041, 0.033552112229528586, 0.6528964698535102, 0.5726281689229864, 0.3201584090821208, 0.6953015861164284, 0.666293894218843, 0.0931612312344039, 0.24139207624983183, 0.43899301926189094, 0.1509196064590388, 0.6271246626427347, 0.20570167270677597, 0.405849093465942, 0.879649126199882, 0.24834474608144763, 0.3380864300698956, 0.13176730677676862, 0.21226397221017068, 0.3862976380787799, 0.7537788843128865, 0.7542818053826481, 0.936491719597718, 0.7003610869573811, 0.05161301128391971, 0.7859057743573763, 0.6792454020559877, 0.6397087308902907, 0.028285269213074837, 0.5469629955401962, 0.28370890188864784, 0.3999979061823127, 0.5016979792421159, 0.5943207136225634, 0.4630288401442859, 0.6557897670678157, 0.7699291801302832, 0.5096684547649075, 0.09155718240774635, 0.7393931337892332, 0.4065862606199193, 0.2143757211741688, 0.1742013033636014, 0.4058541644465443, 0.7577679802257837, 0.7628622526858073, 0.6182730928717428, 0.15730207659551154, 0.9787128328159742, 0.31981331253926837, 0.29201220049208043, 0.7343247685980578, 0.10926591361450644, 0.6246704160846186, 0.24949368638804215, 0.561207555059207, 0.0015244111821339779]

        # Test forward generation
        for d in expected_doubles:
            self.assertEqual(d, math_random.next())

        # Test backward generation
        for d in expected_doubles[::-1]:
            self.assertEqual(d, math_random.previous())
    
